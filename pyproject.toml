[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "yaml2ics"
version = "0.3rc0.dev0"
requires-python = ">=3.8"
authors = [{name = "Scientific Python Developers"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
description = "CLI to convert yaml into ics."

dependencies = [
    "ics-vtimezones == 2020.2",
    "ics == 0.8.0.dev0",
    "python-dateutil >= 2.8",
    "pyyaml >= 6",
    "importlib-resources >= 5.2.1"
]

[project.optional-dependencies]
test = ["pytest >= 7.4.4", "pytest-cov >= 4.1.0"]
lint = ["pre-commit == 3.8.0"]
dev = ["changelist == 0.5"]

[project.scripts]
yaml2ics = "yaml2ics:cli"

[project.urls]
Home = "https://github.com/scientific-python/yaml2ics"
Source = "https://github.com/scientific-python/yaml2ics"

[tool.changelist]
ignored_user_logins = ["dependabot[bot]", "pre-commit-ci[bot]", "web-flow"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
#  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "FURB",     # refurb
  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "ARG002",   # Unused method argument
  "EM101",    # Exception must not use a string literal
  "SIM115",   # Use context handler for opening files
  "RET504",   # Unnecessary assignment before `return` statement
  "T201",     # `print` found
  "EM102",    # Exception must not use an f-string literal
  "RUF015",   # Prefer `next(...)` over single element slice
  "RUF013",   # PEP 484 prohibits implicit `Optional`
  "RET505",   # Unnecessary `elif` after `return` statement
  "RET503",   # Missing explicit `return`
  "ARG001",   # Unused function argument
  "PT012",    # `pytest.raises()` block
  "PLW0129",  # Asserting on a non-empty string literal will always pass
]
